// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"dg-server/config"
	"dg-server/infrastructure"
	"dg-server/infrastructure/database"
	"dg-server/internal/repository"
	"dg-server/internal/transport/http/v1"
	"dg-server/internal/usecase"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeServer wires up Echo → MyService → Server.
func InitializeServer() (*Server, error) {
	logger := infrastructure.ProvideLogger()
	echo := NewEcho(logger)
	configConfig := config.ProvideConfig()
	databaseDatabase, err := database.NewDatabase(configConfig, logger)
	if err != nil {
		return nil, err
	}
	db := ProvideGormDB(databaseDatabase)
	v := ProvideUnitOfWorkFactory(db)
	orgRegistrationUseCase := usecase.NewOrgRegistrationUseCase(v)
	onboardingHandler := v1.NewOnboardingHandler(orgRegistrationUseCase)
	controlRepository := repository.NewControlRepository(db)
	controlUseCase := usecase.NewControlUseCase(controlRepository)
	controlHandler := v1.NewControlHandler(controlUseCase)
	evidenceTaskRepository := repository.NewEvidenceTaskRepository(db)
	evidenceTaskUseCase := usecase.NewEvidenceTaskUseCase(evidenceTaskRepository)
	evidenceTaskHandler := v1.NewEvidenceTaskHandler(evidenceTaskUseCase)
	frameworkRepository := repository.NewFrameworkRepository(db)
	frameworkUseCase := usecase.NewFrameworkUseCase(frameworkRepository, controlRepository)
	frameworkHandler := v1.NewFrameworkHandler(frameworkUseCase)
	server := NewServer(echo, configConfig, logger, onboardingHandler, controlHandler, evidenceTaskHandler, frameworkHandler)
	return server, nil
}

// wire.go:

// ProvideGormDB makes the inner *gorm.DB available for DI.
func ProvideGormDB(d *database.Database) *gorm.DB {
	return d.DB
}

// ProvideUnitOfWorkFactory gives Wire a func() repository.UnitOfWork to inject
// into your NewOrgRegistrationUseCase.
func ProvideUnitOfWorkFactory(db *gorm.DB) func() repository.UnitOfWork {
	return func() repository.UnitOfWork {
		return repository.NewUnitOfWork(db)
	}
}
